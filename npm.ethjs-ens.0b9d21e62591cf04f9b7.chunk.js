(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"243ab3ad161626937037":function(module,exports,__webpack_require__){(function(Buffer){var sha3=__webpack_require__("8b2ccb65063bab1e1f16").keccak_256,uts46=__webpack_require__("10335175fbd0b0da9040");module.exports=function(inputName){for(var node="",i=0;i<32;i++)node+="00";if(name=function(name){return name?uts46.toUnicode(name,{useStd3ASCII:!0,transitional:!1}):name}(inputName),name){var labels=name.split(".");for(i=labels.length-1;i>=0;i--){var labelSha=sha3(labels[i]);node=sha3(new Buffer(node+labelSha,"hex"))}}return`0x${node}`}}).call(this,__webpack_require__("4de17b50d35d24f9c74a").Buffer)},"474761d6695cda1de2b6":function(module){module.exports=[{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"resolver",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"owner",outputs:[{name:"",type:"address"}],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"resolver",type:"address"}],name:"setResolver",outputs:[],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"label",type:"bytes32"},{name:"owner",type:"address"}],name:"setSubnodeOwner",outputs:[],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"owner",type:"address"}],name:"setOwner",outputs:[],type:"function"}]},cbe9772c7488da590d0a:function(module,exports,__webpack_require__){const Eth=__webpack_require__("ba692a62cc5429a1fd3c"),EthContract=__webpack_require__("4a04fc680721c3e91c74"),namehash=__webpack_require__("243ab3ad161626937037"),registryAbi=__webpack_require__("474761d6695cda1de2b6"),resolverAbi=__webpack_require__("da42376a3a7a43b2611b"),networkMap=__webpack_require__("4f48f083ac167d0b50a1"),emptyHash="0x0000000000000000000000000000000000000000000000000000000000000000",emptyAddr="0x0000000000000000000000000000000000000000",NotFoundError=new Error("ENS name not defined."),BadCharacterError=new Error("Illegal Character for ENS.");module.exports=class{constructor(opts={}){const{provider:provider,network:network}=opts;let{registryAddress:registryAddress}=opts;if(!provider)throw new Error("The EthJsENS Constructor requires a provider.");if(!network&&!registryAddress)throw new Error("The EthJsENS Constructor requires a network or registry address.");this.provider=provider,this.eth=new Eth(this.provider),this.contract=new EthContract(this.eth),this.namehash=namehash,this.Registry=this.contract(registryAbi),!registryAddress&&network&&(registryAddress=networkMap[network]),this.registry=this.Registry.at(registryAddress),this.Resolver=this.contract(resolverAbi)}lookup(name=""){return this.getNamehash(name).then((node=>node===emptyHash?Promise.reject(NotFoundError):this.resolveAddressForNode(node)))}getNamehash(name){try{return Promise.resolve(namehash(name))}catch(e){return Promise.reject(BadCharacterError)}}getOwner(name=""){return this.getNamehash(name).then((node=>this.getOwnerForNode(node)))}getOwnerForNode(node){return node===emptyHash?Promise.reject(NotFoundError):this.registry.owner(node).then((result=>{const ownerAddress=result[0];if(ownerAddress===emptyAddr)throw NotFoundError;return ownerAddress}))}getResolver(name=""){return this.getNamehash(name).then((node=>this.getResolverForNode(node)))}getResolverAddress(name=""){return this.getNamehash(name).then((node=>this.getResolverAddressForNode(node)))}getResolverForNode(node){return node.startsWith("0x")||(node=`0x${node}`),this.getResolverAddressForNode(node).then((resolverAddress=>this.Resolver.at(resolverAddress)))}getResolverAddressForNode(node){return this.registry.resolver(node).then((result=>{const resolverAddress=result[0];if(resolverAddress===emptyAddr)throw NotFoundError;return resolverAddress}))}resolveAddressForNode(node){return this.getResolverForNode(node).then((resolver=>resolver.addr(node))).then((result=>result[0]))}reverse(address){if(!address)return Promise.reject(new Error("Must supply an address to reverse lookup."));address.startsWith("0x")&&(address=address.slice(2));const name=`${address.toLowerCase()}.addr.reverse`,node=namehash(name);return this.getNamehash(name).then((node=>this.getResolverForNode(node))).then((resolver=>resolver.name(node))).then((results=>results[0]))}}},da42376a3a7a43b2611b:function(module){module.exports=[{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"addr",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"content",outputs:[{name:"",type:"bytes32"}],type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"name",outputs:[{name:"",type:"string"}],type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"},{name:"kind",type:"bytes32"}],name:"has",outputs:[{name:"",type:"bool"}],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"addr",type:"address"}],name:"setAddr",outputs:[],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"hash",type:"bytes32"}],name:"setContent",outputs:[],type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"name",type:"string"}],name:"setName",outputs:[],type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"},{name:"contentType",type:"uint256"}],name:"ABI",outputs:[{name:"",type:"uint256"},{name:"",type:"bytes"}],payable:!1,type:"function"}]}}]);